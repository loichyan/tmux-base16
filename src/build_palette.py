#!/usr/bin/env python3

# pyright: reportUnusedCallResult=false

import argparse
import colorsys
from configparser import ConfigParser, SectionProxy


def hex2rgb(hex: str) -> tuple[int, int, int]:
    if len(hex) == 3:
        hex = "".join(map(lambda c: c + c, list(hex)))

    i = int(hex, 16)
    r = (i >> 16) & 0xFF
    g = (i >> 8) & 0xFF
    b = (i >> 0) & 0xFF

    return r, g, b


def rgb2hex(r: int, g: int, b: int) -> str:
    return f"{r:02x}{g:02x}{b:02x}"


def brighten(hex: str, *, delta: float = 0, percentage: float = 0) -> str:
    r, g, b = hex2rgb(hex)
    h, l, s = colorsys.rgb_to_hls(r, g, b)

    l = l + delta
    l = l + l * percentage / 100

    r, g, b = colorsys.hls_to_rgb(h, l, s)
    return rgb2hex(int(r), int(g), int(b))


def parse_modification(s: str) -> tuple[float, float]:
    p = s.rstrip("%")
    if p == s:
        return float(p), 0
    else:
        return 0, float(p)


def to_palette_entry(key: str, val: str) -> str:
    return f'set -g {key} "{val}"'


def build_palette_variant(config: SectionProxy):
    result: list[str] = []
    palette_keys = [f"base{i:02X}" for i in range(0, 16)]

    # Header
    scheme = config.get("scheme")
    if scheme is not None:
        result += [f"# Scheme: {scheme}"]
    author = config.get("author")
    if author is not None:
        result += [f"# Author: {author}"]

    # Normal colors
    for k in palette_keys:
        hex = config.get(k)
        assert hex is not None, f"palette for {k} is missing"
        hex = hex.lstrip("#")
        result += [f'set -g @{k} "#{hex}"']

    # Bright colors
    bright = config.get("bright")
    if bright is not None:
        d, p = parse_modification(bright)
        result += [f"# Colors brithened by {bright}"]
        for k in palette_keys:
            hex = config.get(k)
            assert hex is not None, f"palette for {k} is missing"
            hex = hex.lstrip("#")
            hex = brighten(hex, delta=d, percentage=p)
            result += [f'set -g @{k}-bright "#{hex}"']

    return result


def build_palette(path: str) -> str:
    config = ConfigParser()
    config.read(path)
    result = ["# This file is @generated by tmux-base16"]

    result += ['%if "#{==:#{@base16-background},light}"']
    if "light" in config.sections():
        result += map(lambda s: "\t" + s, build_palette_variant(config["light"]))
    result += ["%else"]
    if "dark" in config.sections():
        result += map(lambda s: "\t" + s, build_palette_variant(config["dark"]))
    result += ["%endif"]

    return "\n".join(result)


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-i",
        "--input",
        metavar="<path>",
        help="path to palette configuration",
        required=True,
    )
    parser.add_argument(
        "-o",
        "--output",
        metavar="<path>",
        help="path to write generated palette",
    )
    return parser.parse_args()


def main():
    args = parse_args()
    palette = build_palette(args.input)
    if args.output is not None:
        with open(args.output, "w") as f:
            f.write(palette)
    else:
        print(palette)


if __name__ == "__main__":
    main()
